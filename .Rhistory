getwd()
read.table()
library(readr)
E_GEOD_4773_processed_1 <- read_delim("C:/Users/klemm/Downloads/E-GEOD-4773.processed.1.zip",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
View(E_GEOD_4773_processed_1)
ls()
E_GEOD_4773_processed_1 <- name("dataset")
E_GEOD_4773_processed_1 <- "data"
library(readr)
Chemical_List_EPAPCS_2022_04_09 <- read_csv("C:/Users/klemm/Downloads/Chemical List EPAPCS-2022-04-09.csv")
View(Chemical_List_EPAPCS_2022_04_09)
install.packages("jaccard")
library(jaccard)
install.packages("qvalue")
library(jaccard)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("qvalue")
library(jaccard)
jaccard(SMILES)
help(jaccard)
x <- ["Rotenol",2]
df.iupac <- df(Chemical_List_EPAPCS_2022_04_09)
ls()
str(Chemical_List_EPAPCS_2022_04_09)
df_iupac <- data.frame(Chemical_List_EPAPCS_2022_04_09)
m_namesmile <- matrix(df_iupac, nrow=4038, byrow=TRUE)
data.class(df_iupac)
data.class(Chemical_List_EPAPCS_2022_04_09)
namesmile <- df_iupac[,c(2,5,6)]
namesmile
library(RxnSim)
install.packages(RxnSim)
install.packages(RxnSim-package)
install.packages("RxnSim")
load("~/rotenone-tanimoto/rotenone_tanimoto.RData")
#Comments refer to the code above them.
sessionInfo(NULL)
install.packages("RxnSim")
#requires Rtools
install.packages("dplyr")
packages <- c("readr","dplyr","utils", "RxnSim")
lapply(packages, library, character.only = TRUE)
#The previous 2 lines make it easier to load packages and libraries without needing to enter library() every time
Chemical_List_EPAPCS_2022_04_09 <- read_csv("C:/Chemical List EPAPCS-2022-04-09.csv")
df_smiles_unfiltered <- select(Chemical_List_EPAPCS_2022_04_09, "PREFERRED NAME", "SMILES")
df_smiles <- na.omit(df_smiles_unfiltered)
#Cleaning up dataset by removing all entries without SMILES
df_smiles[, 'Similarity'] <- NA
#Adding a third column to df_smiles where the similarity values will be added upon calculation
View(df_smiles)
molA <- "[H][C@@]12COC3=C(C=C(OC)C(OC)=C3)[C@]1([H])C(=O)C1=CC=C3O[C@H](CC3=C1O2)C(C)=C"
#This is the SMILES for Rotenone; defining molA as another SMILES value allows for comparisons of all kinds of pesticides.
df_smiles <- data.frame(lapply(df_smiles, as.character), stringsAsFactors = FALSE)
#For some reason, the df is seen as tables, not characters. This function forces all values to be characters
for(row in 1:nrow(df_smiles)){calculation <-ms.compute(molA, df_smiles[row,"SMILES"], standardize = FALSE)}
#This line repeats ms.compute for each row of df_smiles so that a comparison between Rotenone (=molA) and all other (available) pesticides (= "SMILES") is made
#RxnSim also allows comparisons between each pesticide in a list by using the ms.compute.sim.matrix function.
#Comments refer to the code above them.
sessionInfo()
library(reshape)
library(gdata)
#gdata has the cbindX function, allowing cbind with differing number of rows (rows are extended and filled with NA)
df <- cbindX( xp1[,"GENE_SYMBOL"],xp1[,"logFC"], xp2[,"logFC"], xp3[,"logFC"])
colnames(df) <- c("Gene symbol", "xp1", "xp2", "xp3")
#Creating a df containing gene symbols and the logFC of all samples
rownames(df) <- make.names(df[,1], unique = TRUE)
xpmatrix <- as.matrix(df[2:4])
df<-melt(xpmatrix)
xpmatrix <- as.matrix(df[2:4])
#gdata has the cbindX function, allowing cbind with differing number of rows (rows are extended and filled with NA)
df <- cbindX( xp1[,"GENE_SYMBOL"],xp1[,"logFC"], xp2[,"logFC"], xp3[,"logFC"])
xp1 <- read_delim("expression/8_dmso_vs_8_rot50_12.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp2 <- read_delim("expression/8_dmso_vs_8_rot50_24.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp3 <- read_delim("expression/8_dmso_vs_8_rot100_24.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
library(readr)
setwd("~/GitHub/rotenone-geo2r-heatmap")
xp1 <- read_delim("expression/8_dmso_vs_8_rot50_12.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp2 <- read_delim("expression/8_dmso_vs_8_rot50_24.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp3 <- read_delim("expression/8_dmso_vs_8_rot100_24.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
library(reshape)
library(gdata)
#gdata has the cbindX function, allowing cbind with differing number of rows (rows are extended and filled with NA)
df <- cbindX( xp1[,"GENE_SYMBOL"],xp1[,"logFC"], xp2[,"logFC"], xp3[,"logFC"])
colnames(df) <- c("Gene symbol", "xp1", "xp2", "xp3")
#Creating a df containing gene symbols and the logFC of all samples
rownames(df) <- make.names(df[,1], unique = TRUE)
xpmatrix <- as.matrix(df[2:4])
df<-melt(xpmatrix)
View(df)
colnames(df) <- c("Gene Symbol","dataset","expressiom")
library(ggplot2)
ggplot(df, aes(x = "Gene Symbol", y = "dataset", fill = "expression")) +
geom_tile()
ggplot(df, aes(x = "dataset", y = "Gene Symbol", fill = "expression")) +
geom_tile()
ggplot(df, aes(x = dataset, y = Genesymbol, fill = expression)) +
geom_tile()
colnames(df) <- c("Genesymbol", "xp1", "xp2", "xp3")
#gdata has the cbindX function, allowing cbind with differing number of rows (rows are extended and filled with NA)
df <- cbindX( xp1[,"GENE_SYMBOL"],xp1[,"logFC"], xp2[,"logFC"], xp3[,"logFC"])
colnames(df) <- c("Genesymbol", "xp1", "xp2", "xp3")
#Creating a df containing gene symbols and the logFC of all samples
rownames(df) <- make.names(df[,1], unique = TRUE)
xpmatrix <- as.matrix(df[2:4])
df<-melt(xpmatrix)
colnames(df) <- c("Gene Symbol","dataset","expression")
ggplot(df, aes(x = dataset, y = Genesymbol, fill = expression)) +
geom_tile()
colnames(df) <- c("Genesymbol","dataset","expression")
#Making a dataframe that can be used with ggplot2
library(ggplot2)
ggplot(df, aes(x = dataset, y = Genesymbol, fill = expression)) +
geom_tile()
colnames(df) <- c("Gene","dataset","logFC")
#Making a dataframe that can be used with ggplot2
library(ggplot2)
ggplot(df, aes(x = dataset, y = Gene, fill = logFC)) +
geom_tile()
ggplot(df, aes(x = dataset, y = Gene, fill = logFC)) +
geom_tile(color="black",
lwd=1.5,
linetype=1)
ggplot(df, aes(x = dataset, y = Gene, fill = logFC)) +
geom_tile(color="black",
lwd=0.5,
linetype=1)+
scale_fill_gradient2(low = "#0000ff",
mid = "#ffffff",
high = "#ff0000")
ggplot(df, aes(x = dataset, y = Gene, fill = logFC)) +
geom_tile(color="black",
lwd=0.01,
linetype=1)+
scale_fill_gradient2(low = "#0000ff",
mid = "#ffffff",
high = "#ff0000")
ggplot(df, aes(x = dataset, y = Gene, fill = logFC)) +
geom_tile()+
scale_fill_gradient2(low = "#0000ff",
mid = "#ffffff",
high = "#ff0000")
ggplot(df, aes(x = dataset, y = Gene, fill = logFC)) +
geom_tile()+
scale_fill_gradient2(low = "#0000ff",
mid = "#ffffff",
high = "#ff0000",
limits=c(-0.26,0.26))
ggplot(df, aes(x = dataset, y = Gene, fill = logFC)) +
geom_tile()+
scale_fill_gradient2(low = "#0000ff",
mid = "#ffffff",
high = "#ff0000",
limits=c(-0.26,0.26),
by=0.5)
ggplot(df, aes(x = dataset, y = Gene, fill = logFC)) +
geom_tile()+
scale_fill_gradient2(low = "#0000ff",
mid = "#ffffff",
high = "#ff0000",
limits=c(-0.26,0.26),
breaks=seq(-0.26,0.26,by=0.5))
ggplot(df, aes(x = dataset, y = Gene, fill = logFC)) +
geom_tile()+
scale_fill_gradient2(low = "#0000ff",
mid = "#ffffff",
high = "#ff0000",
limits=c(-0.26,0.26),
breaks=seq(-0.26,0.26,by=0.13))
ggsave(file="heatmap_rot", plot=heatmapt_rot, width=10,height=10)
rotheatmap=rotheatmap
rotheatmap <- ggplot(df, aes(x = dataset, y = Gene, fill = logFC)) +
geom_tile()+
scale_fill_gradient2(low = "#0000ff",
mid = "#ffffff",
high = "#ff0000",
limits=c(-0.26,0.26),
breaks=seq(-0.26,0.26,by=0.13))
rotheatmap=rotheatmap
ggsave(file="heatmap_rot", plot=heatmapt_rot, width=10,height=10)
ggsave(file="heatmap_rot.svg", plot=heatmapt_rot, width=10,height=10)
ggsave(file="rotheatmap.svg", plot=heatmapt_rot, width=10,height=10)
ggsave(file="rotheatmap.svg", plot=rotheatmap, width=10,height=10)
install.packages("svglite")
library(svglite)
ggsave(file="rotheatmap.svg", plot=rotheatmap, width=10,height=10)
rotheatmap <- ggplot(df, aes(x = dataset, y = Gene, fill = logFC)) +
geom_tile()+
scale_fill_gradient2(low = "#0000ff",
mid = "#ffffff",
high = "#ff0000",
limits=c(-0.26,0.26),
breaks=seq(-0.26,0.26,by=0.13))+
theme(axis.title.y = element_blank())
#Making a dataframe that can be used with ggplot2
library(ggplot2)
rotheatmap <- ggplot(df, aes(x = dataset, y = Gene, fill = logFC)) +
geom_tile()+
scale_fill_gradient2(low = "#0000ff",
mid = "#ffffff",
high = "#ff0000",
limits=c(-0.26,0.26),
breaks=seq(-0.26,0.26,by=0.13))+
theme(axis.title.y = element_blank())
library(readr)
xp1 <- read_delim("expression/8_dmso_vs_8_rot50_12.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp2 <- read_delim("expression/8_dmso_vs_8_rot50_24.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp3 <- read_delim("expression/8_dmso_vs_8_rot100_24.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
install.packages("reshape")
install.packages("gdata")
library(reshape)
library(gdata)
#gdata has the cbindX function, allowing cbind with differing number of rows (rows are extended and filled with NA)
df <- cbindX( xp1[,"GENE_SYMBOL"],xp1[,"logFC"], xp2[,"logFC"], xp3[,"logFC"])
colnames(df) <- c("Genesymbol", "xp1", "xp2", "xp3")
#Creating a df containing gene symbols and the logFC of all samples
rownames(df) <- make.names(df[,1], unique = TRUE)
xpmatrix <- as.matrix(df[2:4])
df<-melt(xpmatrix)
colnames(df) <- c("Gene","dataset","logFC")
#Making a dataframe that can be used with ggplot2
library(ggplot2)
rotheatmap <- ggplot(df, aes(x = dataset, y = Gene, fill = logFC)) +
geom_tile()+
scale_fill_gradient2(low = "#0000ff",
mid = "#ffffff",
high = "#ff0000",
limits=c(-0.26,0.26),
breaks=seq(-0.26,0.26,by=0.13))+
theme(axis.title.y = element_blank())
View(rotheatmap)
rotheatmap=rotheatmap
install.packages("svglite")
library(svglite)
ggsave(file="rotheatmap.svg", plot=rotheatmap, width=10,height=10)
rotheatmap <- ggplot(df, aes(x = dataset, y = Gene, fill = logFC)) +
geom_tile()+
scale_fill_gradient2(low = "#0000ff",
mid = "#ffffff",
high = "#ff0000",
limits=c(-0.26,0.26),
breaks=seq(-0.26,0.26,by=0.13))+
theme(axis.text.y = element_blank())
rotheatmap=rotheatmap
install.packages("svglite")
install.packages("svglite")
ggsave(file="rotheatmap.svg", plot=rotheatmap, width=10,height=10)
#gdata has the cbindX function, allowing cbind with differing number of rows (rows are extended and filled with NA)
df <- cbindX( xp1[,"GENE_SYMBOL"],xp1[,"logFC"], xp2[,"logFC"], xp3[,"logFC"])
colnames(df) <- c("Genesymbol", "xp1", "xp2", "xp3")
#Creating a df containing gene symbols and the logFC of all samples
rownames(df) <- make.names(df[,1], unique = TRUE)
xpmatrix <- as.matrix(df[2:4])
df<-melt(xpmatrix)
colnames(df) <- c("Genes","Dataset","logFC")
rotheatmap <- ggplot(df, aes(x = Dataset, y = Genes, fill = logFC)) +
geom_tile()+
scale_fill_gradient2(low = "#0000ff",
mid = "#ffffff",
high = "#ff0000",
limits=c(-0.26,0.26),
breaks=seq(-0.26,0.26,by=0.13))+
theme(axis.text.y = element_blank())
rotheatmap=rotheatmap
install.packages("svglite")
install.packages("svglite")
ggsave(file="rotheatmap.svg", plot=rotheatmap, width=10,height=10)
?geom_tile
library(readr)
setwd("~/GitHub/rotenone-geo2r-heatmap")
xp1 <- read_delim("expression/8_dmso_vs_8_rot50_12.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp2 <- read_delim("expression/8_dmso_vs_8_rot50_24.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp3 <- read_delim("expression/8_dmso_vs_8_rot100_24.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
library(reshape)
library(gdata)
#gdata has the cbindX function, allowing cbind with differing number of rows (rows are extended and filled with NA)
df <- cbindX( xp1[,"GENE_SYMBOL"],xp1[,"logFC"], xp2[,"logFC"], xp3[,"logFC"])
colnames(df) <- c("Genesymbol", "xp1", "xp2", "xp3")
#Creating a df containing gene symbols and the logFC of all samples
rownames(df) <- make.names(df[,1], unique = TRUE)
xpmatrix <- as.matrix(df[2:4])
df<-melt(xpmatrix)
colnames(df) <- c("Genes","Dataset","logFC")
#Making a dataframe that can be used with ggplot2
library(ggplot2)
rotheatmap <- ggplot(df, aes(x = Dataset, y = Genes, fill = logFC)) +
geom_tile()+
scale_fill_gradient2(low = "#0000ff",
mid = "#ffffff",
high = "#ff0000",
limits=c(-0.26,0.26),
breaks=seq(-0.26,0.26,by=0.13))+
theme(axis.text.y = element_blank())
rotheatmap=rotheatmap
library(svglite)
ggsave(file="rotheatmap.svg", plot=rotheatmap, width=10,height=10)
library(RCy3)
setwd("~/GitHub/rotenone-cytoscape")
cytoscapePing()
cytoscapePing()
main <- getNetworkName()
openSession("Sessions/rotenone-8-50-12.cys")
main <- getNetworkName()
library(readr)
#Installing required packages
setwd("~/GitHub/rotenone-geo2r-volcano")
xp1 <- read_delim("Expression/8_dmso_vs_8_rot50_12.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp2 <- read_delim("Expression/8_dmso_vs_8_rot50_24.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp3 <- read_delim("Expression/8_dmso_vs_8_rot100_24.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
library(ggplot2)
library(ggrepel)
volcp <- function(xp) {
xp$diffexpressed <- "Not sig"
xp$diffexpressed[xp$logFC > 0.26 & xp$P.Value < 0.05] <- "UP"
xp$diffexpressed[xp$logFC < -0.26 & xp$P.Value < 0.05] <- "DOWN"
#Setting the labels for significantly (P-value < 0.05) up and down regulated genes
xp$xplabel <- NA
xp$xplabel[xp$diffexpressed != "Not sig"] <- xp$GENE_SYMBOL[xp$diffexpressed != "Not sig"]
ggplot(data=xp, aes(x=logFC, y=-log10(P.Value), col=diffexpressed, label=xplabel)) +
geom_point() +
theme_grey() +
scale_color_manual(values = c("blue", "dimgrey", "red")) +
#Setting the color for the points according to their expression
geom_vline(xintercept=c(-0.26, 0.26), col="red") +
geom_hline(yintercept=-log10(0.05), col="red")+
#Adding a vertical and horizontal line to indicate logFC and p-value significance
theme(legend.title=element_blank())
#Hiding the legend title
}
View("UP")
View(UP)
n <- sum(with(xp1, P.Value <= 0.05,logFC = -0.26,0.26))
xp$diffexpressed[xp$logFC > 0.26 & xp$P.Value < 0.05]
xp1$diffexpressed[xp$logFC > 0.26 & xp$P.Value < 0.05]
xp1$diffexpressed <- "Not sig"
xp1$diffexpressed[xp$logFC > 0.26 & xp$P.Value < 0.05] <- "UP"
xp1$diffexpressed[xp$logFC < -0.26 & xp$P.Value < 0.05] <- "DOWN"
xp1$diffexpressed <- "Not sig"
xp1$diffexpressed[xp1$logFC > 0.26 & xp1$P.Value < 0.05] <- "UP"
xp1$diffexpressed[xp1$logFC < -0.26 & xp1$P.Value < 0.05] <- "DOWN"
xp1$diffexpressed[xp$logFC > 0.26 & xp$P.Value < 0.05]
volcp(xp1)
n <- sum(with(xp1, P.Value <= 0.05, logFC >= 0.26 ))
n <- sum(with(xp1, P.Value <= 0.05, logFC >= 0.26 ))
n <- sum(with(xp1, P.Value <= 0.05, logFC >= 0.3 ))
n <- table(xp1$diffexpressed)
n <- nrow(subset(xp1, c(P.Value < 0.05, logFC > 0.26)))
n <- nrow(subset(xp1, P.Value < 0.05, logFC > 0.26))
n <- nrow(subset(xp1, P.Value < 0.05, logFC > 0.1))
n <- nrow(subset(xp1, P.Value < 0.01, logFC > 0.1))
cond <- c(P.Value < 0.05, logFC > 0.26)
cond <- c("P.Value < 0.05", "logFC > 0.26")
n <- nrow(subset(cond)
n <- nrow(subset(cond))
n <- nrow(subset(cond))
n <- nrow(subset(xp1, cond))
#Loading GEO2R data sets
summary(xp1$logFC>0.26, P.Value <0.05)
#Loading GEO2R data sets
summary(xp1$logFC>0.26)
#Loading GEO2R data sets
summary(xp1$c(logFC>0.26, P.Value < 0.05))
#Loading GEO2R data sets
summary(xp1$logFC>0.26, xp1$P.Value<0.05)
?count
#Loading GEO2R data sets
xp1 %>% count(logFC >0.26, P.Value <0.05)
#Loading GEO2R data sets
library(dplur)
#Loading GEO2R data sets
library(dplyr)
xp1 %>% count(logFC >0.26, P.Value <0.05)
xp1 %>% count(logFC <-0.26, P.Value <0.05)
xp1 %>% count(logFC < -0.26, P.Value <0.05)
xp2 %>% count(logFC < -0.26, P.Value <0.05)
xp2 %>% count(logFC > 0.26, P.Value <0.05)
xp1 %>% count(logFC > 0.26, P.Value <0.05)
xp2%>% count(logFC > 0.26, P.Value <0.05)
xp3%>% count(logFC > 0.26, P.Value <0.05)
xp1%>% count(logFC < -0.26, P.Value <0.05)
xp2%>% count(logFC < -0.26, P.Value <0.05)
xp3%>% count(logFC < -0.26, P.Value <0.05)
